name: Foodgram Test Workflow

on:

  push:
    branches: [ "tests" ]
    
jobs:

  # tests:
  #   name: PEP8 check
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.8
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip 
  #         pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
  #         cd backend/foodgram
  #         pip install -r requirements.txt
  #     - name: Test with flake8
  #       run: |
  #         python -m flake8 backend

  build_and_push_backend_to_docker_hub:
    name: Pushing backend image to Docker Hub
    runs-on: ubuntu-latest
    # needs:
    #   - tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./backend/foodgram/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest

  build_and_push_frontend_to_docker_hub:
    name: Pushing frontend image to Docker Hub
    runs-on: ubuntu-latest
    # needs:
    #   - tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend:latest

  deploy:
    name: run docker-compose
    runs-on: ubuntu-latest
    # needs:
    #   - build_and_push_backend_to_docker_hub
    #   - build_and_push_frontend_to_docker_hub
    steps:
      - uses: actions/checkout@v3
      - name: docker-compose up
        run: docker compose -f ./docker-compose.yml up -d
      # - uses: isbang/compose-action@v1.4.1
        # with:
        #   compose-file: docker-compose.yml
        #   # down-flags: --volumes
        #   env_file: .env
          # env:
          #   DB_ENGINE=django.db.backends.postgresql
          #   DB_NAME=postgres
          #   POSTGRES_USER=postgres
          #   POSTGRES_PASSWORD=postgres
          #   DB_HOST=db
          #   DB_PORT=5432
          #   SECRET_KEY=12345
          #   ALLOWED_HOSTS=127.0.0.1
          # services: |
          #   sudo docker-compose up -d








  # deploy:
  #   name: Deploying on remote server
  #   runs-on: ubuntu-latest
  #   needs:
  #     - tests
  #     - build_and_push_backend_to_docker_hub
  #     - build_and_push_frontend_to_docker_hub
  #   steps:
  #     - name: Executing remote ssh commands to deploy
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USER }}
  #         key: ${{ secrets.SSH_KEY }}
  #         passphrase: ${{ secrets.PASSPHRASE }}
  #         script: |
  #           sudo systemctl stop nginx    
  #           sudo touch .env
  #           sudo chmod 666 .env
            
  #           sudo echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
  #           sudo echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
  #           sudo echo DB_NAME=${{ secrets.DB_NAME }} >> .env
  #           sudo echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
  #           sudo echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
  #           sudo echo DB_HOST=${{ secrets.DB_HOST }} >> .env
  #           sudo echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            
  #           sudo docker compose stop
            
  #           sudo docker compose rm backend
  #           sudo docker compose pull backend
  #           sudo docker compose rm frontend
  #           sudo docker compose pull frontend
            
  #           sudo docker compose up -d --build
  #           sudo docker compose exec backend python manage.py migrate
  #           sudo docker compose exec backend python manage.py collectstatic --noinput
  #           sudo docker compose exec backend python manage.py load_ingredients
#@