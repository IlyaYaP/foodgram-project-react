name: Foodgram Test Workflow

on:

  push:
    branches: [ "tests" ]
    
jobs:

  deploy:
    name: run docker-compose
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: docker-compose up
        run: docker compose -f ./infra/docker-compose.yml up -d
      # - uses: isbang/compose-action@v1.4.1
          with:
        #   compose-file: docker-compose.yml
        #   # down-flags: --volumes
            env_file: .env
          # env:
          #   DB_ENGINE=django.db.backends.postgresql
          #   DB_NAME=postgres
          #   POSTGRES_USER=postgres
          #   POSTGRES_PASSWORD=postgres
          #   DB_HOST=db
          #   DB_PORT=5432
          #   SECRET_KEY=12345
          #   ALLOWED_HOSTS=127.0.0.1
          # services: |
          #   sudo docker-compose up -d








  # deploy:
  #   name: Deploying on remote server
  #   runs-on: ubuntu-latest
  #   needs:
  #     - tests
  #     - build_and_push_backend_to_docker_hub
  #     - build_and_push_frontend_to_docker_hub
  #   steps:
  #     - name: Executing remote ssh commands to deploy
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USER }}
  #         key: ${{ secrets.SSH_KEY }}
  #         passphrase: ${{ secrets.PASSPHRASE }}
  #         script: |
  #           sudo systemctl stop nginx    
  #           sudo touch .env
  #           sudo chmod 666 .env
            
  #           sudo echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
  #           sudo echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
  #           sudo echo DB_NAME=${{ secrets.DB_NAME }} >> .env
  #           sudo echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
  #           sudo echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
  #           sudo echo DB_HOST=${{ secrets.DB_HOST }} >> .env
  #           sudo echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            
  #           sudo docker compose stop
            
  #           sudo docker compose rm backend
  #           sudo docker compose pull backend
  #           sudo docker compose rm frontend
  #           sudo docker compose pull frontend
            
  #           sudo docker compose up -d --build
  #           sudo docker compose exec backend python manage.py migrate
  #           sudo docker compose exec backend python manage.py collectstatic --noinput
  #           sudo docker compose exec backend python manage.py load_ingredients
#@
